{
	"info": {
		"_postman_id": "4e4f9c25-9d63-40b1-ad12-28ea70ac0de3",
		"name": "API",
		"description": "API for the Web Integration Assignment \\\nAuthor: Kieran Knowles \\\nGenerated with assistance from GitHub Copilot\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "13372409-4e4f9c25-9d63-40b1-ad12-28ea70ac0de3"
	},
	"item": [
		{
			"name": "content",
			"item": [
				{
					"name": "country",
					"item": [
						{
							"name": "Get all countries referenced in the database",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb19bfaf-3e7f-4ca8-93cf-c48de92aac73",
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6da84de5-1c39-471e-a5f1-0d94e5e107e3",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/content/country",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"country"
									]
								},
								"description": "Returns the country names contained in the affiliation database table.\nThe name of each country is returned only once\n"
							},
							"response": [
								{
									"id": "6bb48d89-b121-4072-8e0a-4b11b0a9bb18",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/content/country",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"country"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  \"<string>\",\n  \"<string>\"\n]"
								}
							]
						}
					],
					"id": "c63efee8-5a42-4a73-a957-ea2c8a9de4a6",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c6108d36-7ac9-43e7-aeb8-cf99d9c36a85",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ef7373f6-7080-4952-b944-526e31043fb9",
								"type": "text/javascript",
								"exec": [
									"const schema = {",
									"    type: \"array\",",
									"    items: { type: \"string\" }",
									"};",
									"",
									"const json = pm.response.json();",
									"",
									"pm.test(\"Test that the response matches the expected schema\", () => {",
									"    pm.response.to.have.jsonSchema(schema);",
									"});",
									"",
									"pm.test(\"Test that all elements are unique\", () => {",
									"    const set = new Set();",
									"    // https://www.w3schools.com/jsref/jsref_foreach.asp",
									"    json.forEach((item) => {",
									"        pm.expect(set.has(item), `${item} appears multiple times`).to.be.eql(false);",
									"        set.add(item);",
									"    })",
									"})"
								]
							}
						}
					]
				},
				{
					"name": "preview",
					"item": [
						{
							"name": "Get preview videos and the title of their associated content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7383fc68-bc4a-4cf2-8ec3-b0b41d848689",
										"exec": [
											"pm.test(\"Test that the response matches the expected schema\", () => {\r",
											"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "28349960-2106-46a6-9d39-259f2e5c26b9",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/content/preview?limit=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"preview"
									],
									"query": [
										{
											"key": "limit",
											"value": "<integer>",
											"description": "Maximum number of results to return. Items will still be returned in a random order. \\\nDefault: infinity \\\nMinimum: 1\n"
										}
									]
								},
								"description": "Returns links to preview videos together with the associated content title.\nAny content that does not have a preview video is not.\nThe data is returned in a random order.\n"
							},
							"response": [
								{
									"id": "2601b514-4a3f-4485-9df5-e5f91c69ab91",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/content/preview?limit=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"preview"
											],
											"query": [
												{
													"description": "Maximum number of results to return. Items will still be returned in a random order. \\\nDefault: infinity \\\nMinimum: 1\n",
													"key": "limit",
													"value": "<integer>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"title\": \"<string>\",\n    \"url\": \"<uri>\"\n  },\n  {\n    \"title\": \"<string>\",\n    \"url\": \"<uri>\"\n  }\n]"
								}
							]
						}
					],
					"id": "dee0932a-d3ca-46e1-9e18-3721a74c32ad"
				},
				{
					"name": "author_and_affiliation",
					"item": [
						{
							"name": "Get authors and their affiliations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7619fd0-6e30-43fb-ad45-7437eb0bacaa",
										"exec": [
											"pm.test(\"Test that the response matches the expected schema\", () => {\r",
											"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "3008868e-c473-4d62-8e14-ab8e6399d970",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/content/author_and_affiliation?content=<integer>&country=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"author_and_affiliation"
									],
									"query": [
										{
											"key": "content",
											"value": "<integer>",
											"description": "The id of the content to return authors for. \\\nMutually exclusive with `country`\n"
										},
										{
											"key": "country",
											"value": "<string>",
											"description": "The name of the country to return authors for. \\\nMutually exclusive with `content`\n"
										}
									]
								},
								"description": "Returns the country, city and institution each author is affiliated with for each publication\nthey are associated with. \\\nFor each of these affiliations the author id, author name, content id and content name\nis also returned.\nAuthors can have more than one affiliation for each item of content and that authors\ncan have different affiliations on different items of content. \\\nTherefore, authors may have multiple records returned by this endpoint.\n"
							},
							"response": [
								{
									"id": "1ec6821c-f1cb-4b09-a0b8-3225a02960b0",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/content/author_and_affiliation?content=<integer>&country=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"author_and_affiliation"
											],
											"query": [
												{
													"description": "The id of the content to return authors for. \\\nMutually exclusive with `country`\n",
													"key": "content",
													"value": "<integer>"
												},
												{
													"description": "The name of the country to return authors for. \\\nMutually exclusive with `content`\n",
													"key": "country",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"content\": [\n      {\n        \"id\": \"<integer>\",\n        \"title\": \"<string>\"\n      },\n      {\n        \"id\": \"<integer>\",\n        \"title\": \"<string>\"\n      }\n    ]\n  },\n  {\n    \"author\": {\n      \"id\": \"<integer>\",\n      \"name\": \"<string>\"\n    },\n    \"content\": [\n      {\n        \"id\": \"<integer>\",\n        \"title\": \"<string>\"\n      },\n      {\n        \"id\": \"<integer>\",\n        \"title\": \"<string>\"\n      }\n    ]\n  }\n]"
								}
							]
						}
					],
					"id": "6bc7adc9-6339-441f-8cca-36399028f49a"
				},
				{
					"name": "list",
					"item": [
						{
							"name": "Get information about all research content",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f1c3d04c-e83d-42e5-934c-bd85bc8164ba",
										"exec": [
											"pm.test(\"Test that the response matches the expected schema\", () => {\r",
											"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5f956eb3-0d18-43f1-9012-24a33c467a98",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/content/list?page=<integer>&type=course",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"content",
										"list"
									],
									"query": [
										{
											"key": "page",
											"value": "<integer>",
											"description": "The 'page' of 20 results to return, after `type` is considered. \\\nIf not specified, all results are returned\n"
										},
										{
											"key": "type",
											"value": "course",
											"description": "The type of content to return. \\\nIf not specified, all content is allowed\n"
										}
									]
								},
								"description": "Return information about all research content at the conference. \\\nData contains the title, the abstract, and the content type.\n"
							},
							"response": [
								{
									"id": "2ca60a36-8a34-406f-bf4c-a6b3d7f37d84",
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/content/list?page=<integer>&type=course",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"content",
												"list"
											],
											"query": [
												{
													"description": "The 'page' of 20 results to return, after `type` is considered. \\\nIf not specified, all results are returned\n",
													"key": "page",
													"value": "<integer>"
												},
												{
													"description": "The type of content to return. \\\nIf not specified, all content is allowed\n",
													"key": "type",
													"value": "course"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"abstract\": \"<string>\",\n    \"type\": \"course\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"title\": \"<string>\",\n    \"abstract\": \"<string>\",\n    \"type\": \"course\"\n  }\n]"
								}
							]
						}
					],
					"id": "05140525-5d8b-47e4-a045-62ca38e4469b"
				}
			],
			"id": "b77609d2-9292-4975-aa71-fa43088b9163"
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Authenticate with a username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f61de26e-b632-4dee-9f38-74ab43c08a87",
								"exec": [
									"pm.test(\"Test that the response matches the expected schema\", () => {\r",
									"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2e3fe5d6-134f-43cb-8e9e-0b584f9d6dec",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/token?username=<string>&password=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"token"
							],
							"query": [
								{
									"key": "username",
									"value": "<string>",
									"description": "(Required) The username of the user to authenticate\n"
								},
								{
									"key": "password",
									"value": "<string>",
									"description": "(Required) The password of the user to authenticate\n"
								}
							]
						},
						"description": "Returns a token that can be used to authenticate with the API.\nThe token is valid for 30 minutes after being issued.\n"
					},
					"response": [
						{
							"id": "9e5e7ede-8197-442a-85cf-4df0a5df0380",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/token?username=<string>&password=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"token"
									],
									"query": [
										{
											"description": "(Required) The username of the user to authenticate\n",
											"key": "username",
											"value": "<string>"
										},
										{
											"description": "(Required) The password of the user to authenticate\n",
											"key": "password",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						}
					]
				},
				{
					"name": "Get all notes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d44c36f-9cbf-47b8-b988-564cb01932c3",
								"exec": [
									"pm.test(\"Test that the response matches the expected schema\", () => {\r",
									"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ab1a6ea4-6faa-41f8-8c35-b5dc09f7e659",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
								"key": "token",
								"value": ""
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/note",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"note"
							]
						},
						"description": "Returns all notes associated with the authenticated user\n"
					},
					"response": [
						{
							"id": "5b7502a8-f32e-4189-af38-f1cf484e7b47",
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
										"key": "token",
										"value": ""
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/note",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"note"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n  {\n    \"id\": \"<integer>\",\n    \"content_id\": \"<integer>\",\n    \"text\": \"<string>\"\n  },\n  {\n    \"id\": \"<integer>\",\n    \"content_id\": \"<integer>\",\n    \"text\": \"<string>\"\n  }\n]"
						}
					]
				},
				{
					"name": "Create a new note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f158922b-a9c0-488c-a80b-42dd2c07bbe6",
								"exec": [
									"pm.test(\"Test that the response matches the expected schema\", () => {\r",
									"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a318c0ef-2cfa-460e-9495-43215a6e9bf3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
								"key": "token",
								"value": ""
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/note?content=<integer>&text=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"note"
							],
							"query": [
								{
									"key": "content",
									"value": "<integer>",
									"description": "(Required) The id of the content to create a note for\n"
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "(Required) The text of the note\n"
								}
							]
						},
						"description": "Creates a new note associated with the specified content and authenticated user\n"
					},
					"response": [
						{
							"id": "bab06d6b-d8ee-4629-8cb9-4de9e2027f16",
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
										"key": "token",
										"value": ""
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/note?content=<integer>&text=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"note"
									],
									"query": [
										{
											"description": "(Required) The id of the content to create a note for\n",
											"key": "content",
											"value": "<integer>"
										},
										{
											"description": "(Required) The text of the note\n",
											"key": "text",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "<integer>"
						}
					]
				},
				{
					"name": "Update an existing note",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fee8b68a-379d-4fcf-8985-796b64eec2a8",
								"exec": [
									"pm.test(\"Test that the response matches the expected schema\", () => {\r",
									"    pm.expect(false, \"Define the expected shema.\").to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7b59f411-c5d0-444b-81c3-11591020e981",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [
							{
								"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
								"key": "token",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/note?id=<integer>&text=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"note"
							],
							"query": [
								{
									"key": "id",
									"value": "<integer>",
									"description": "(Required) The id of the note to update\n"
								},
								{
									"key": "text",
									"value": "<string>",
									"description": "(Required) The new text of the note\n"
								}
							]
						},
						"description": "Updates the specified user\n"
					},
					"response": [
						{
							"id": "9a170089-b35c-4517-af54-552ba742fe28",
							"name": "OK",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": "(Required) The token to authenticate with. \\\nThis is returned by the `/user/token` endpoint\n",
										"key": "token",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/user/note?id=<integer>&text=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user",
										"note"
									],
									"query": [
										{
											"description": "(Required) The id of the note to update\n",
											"key": "id",
											"value": "<integer>"
										},
										{
											"description": "(Required) The new text of the note\n",
											"key": "text",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": [],
							"cookie": []
						}
					]
				}
			],
			"id": "c50870bc-8b81-4c78-93ce-98076b1c10f7"
		},
		{
			"name": "Get developer information",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "75934fbd-91d9-4a61-91fc-7c8a225708cd",
						"exec": [
							"pm.test(\"Test that resposne is the expected value\", function() {\r",
							"    pm.expect(pm.response.json()).to.eql({\r",
							"        \"name\": \"Kieran Knowles\",\r",
							"        \"student_id\": \"w20013000\",\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "85d1d91e-9d00-454c-b28b-e84e9d580c3a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/developer",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"developer"
					]
				},
				"description": "Returns name and student ID of the developer"
			},
			"response": [
				{
					"id": "27687783-fa06-4242-82a5-adde9c4b74a4",
					"name": "OK",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/developer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"developer"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"name\": \"<string>\",\n  \"student_id\": \"w68179894\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "d8b92e9f-def7-44c4-bcf6-ba25f7297956",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "12548c32-f9a7-4ea9-92d9-06e6ba11e3e7",
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Test that all responses are valid JSON\", function() {",
					"    // Check that the header indicates JSON",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
					"",
					"    // Decode the resposne to check that it is valid JSON",
					"    pm.response.json();",
					"});",
					"",
					"pm.test(\"Status code is 200\", function () {",
					"    pm.response.to.have.status(200);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"id": "0aad7241-48d6-4ea9-a2b7-99b965d43022",
			"key": "baseUrl",
			"value": "https://w20013000.nuwebspace.co.uk/api",
			"type": "string"
		}
	]
}