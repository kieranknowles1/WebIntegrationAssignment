openapi: "3.0.2"
info:
  title: Web Integration Assignment API
  description: |
    API for the Web Integration Assignment \
    Author: Kieran Knowles \
    Generated with assistance from GitHub Copilot
  version: "1.0"

servers: [{ url: https://w20013000.nuwebspace.co.uk/api }]

tags:
  - name: Content
    description: |
      Information about research content at the conference
  - name: User
    description: |
      User specific information. Requires authentication with `/token`

paths:
  /content/country:
    get:
      tags: [Content]
      summary: Get all countries referenced in the database
      description: |
        Returns the country names contained in the affiliation database table.
        The name of each country is returned only once
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example: [United Kingdom, France, Germany]

  /content/preview:
    get:
      tags: [Content]
      summary: Get preview videos and the title of their associated content
      description: |
        Returns links to preview videos together with the associated content title.
        Any content that does not have a preview video is not.
        The data is returned in a random order.
      parameters:
        - in: query
          name: limit
          required: false
          description: |
            Maximum number of results to return. Items will still be returned in a random order. \
            Default: infinity \
            Minimum: 1
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/preview"

  /content/author_affiliation:
    get:
      tags: [Content]
      summary: Get authors and their affiliations
      description: |
        Returns the country, city and institution each author is affiliated with for each publication
        they are associated with. \
        For each of these affiliations the author id, author name, content id and content name
        is also returned.
        Authors can have more than one affiliation for each item of content and that authors
        can have different affiliations on different items of content. \
        Therefore, authors may have multiple records returned by this endpoint.
      parameters:
        - in: query
          name: content
          required: false
          description: |
            The id of the content to return authors for. \
            Mutually exclusive with `country`
          schema:
            type: integer
        - in: query
          required: false
          name: country
          description: |
            The name of the country to return authors for. \
            Mutually exclusive with `content`
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/affiliationInformation"

  /content/count:
    get:
      tags: [Content]
      summary: Get the number of content items by type
      description: |
        Returns the number of content items by type. \
        Includes types that have no content items.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
                properties:
                  total:
                    type: integer
                    description: The total number of content items
                  types:
                    type: array
                    items:
                      type: object
                      additionalProperties: false
                      properties:
                        type:
                          $ref: "#/components/schemas/contentType"
                        count:
                          type: integer
                          description: The number of content items of this type
                      required: [type, count]

  /content/list:
    get:
      tags: [Content]
      summary: Get information about all research content
      description: |
        Return information about all research content at the conference. \
        Data contains the title, the abstract, and the content type. \
        Content abstract can be null.
      parameters:
        - in: query
          name: page
          required: false
          description: |
            The 'page' of 20 results to return, after `type` is considered. \
            If not specified, all results are returned
          schema:
            type: integer
            minimum: 1
        - in: query
          name: type
          required: false
          description: |
            The type of content to return. \
            If not specified, all content is allowed
          schema:
            $ref: "#/components/schemas/contentType"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/contentFull"

  /content/types:
    get:
      tags: [Content]
      summary: Get all content types
      description: |
        Returns all content types that are defined in the database
        Types are not guaranteed to be used by any content
        Data is returned in alphabetical order
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/contentType"

  /token:
    get:
      summary: Authenticate with a username and password
      description: |
        Returns a token that can be used to authenticate with the API.
        The token is valid for 30 minutes after being issued.
      security: [BasicAuth: []]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                required: [token]
        "401":
          $ref: "#/components/responses/Unauthorized"


  /user/note:
    get:
      tags: [User]
      summary: Get all notes
      description: |
        Returns all notes associated with the authenticated user
      security: [BearerAuth: []]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/note"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags: [User]
      summary: Create a new note
      description: |
        Creates a new note associated with the specified content and authenticated user
      security: [BearerAuth: []]
      parameters:
        - in: query
          name: content
          required: true
          description: |
            The id of the content to create a note for
          schema:
            type: integer
        - in: query
          name: text
          required: true
          description: |
            The text of the note
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: |
                  The id of the note that was created
        "401":
          $ref: "#/components/responses/Unauthorized"

    put:
      tags: [User]
      summary: Update an existing note
      description: |
        Updates the specified user
      security: [BearerAuth: []]
      parameters:
        - in: query
          name: id
          required: true
          description: |
            The id of the note to update
          schema:
            type: integer
        - in: query
          name: text
          required: true
          description: |
            The new text of the note
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

    delete:
      tags: [User]
      summary: Delete an existing note
      description: |
        Deletes the specified note
      security: [BearerAuth: []]
      parameters:
        - in: query
          name: id
          required: true
          description: |
            The id of the note to delete
          schema:
            type: integer
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/Unauthorized"

  /developer:
    get:
      summary: Get developer information
      description: Returns name and student ID of the developer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/developerInformation"

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
            required: [message]
  schemas:
    author:
      type: object
      additionalProperties: false
      required: ["id", "name"]
      properties:
        id:
          type: integer
        name:
          type: string
          example: John Smith

    contentBrief:
      type: object
      additionalProperties: false
      required: ["id", "title"]
      properties:
        id:
          type: integer
        title:
          type: string
          example: How example values can be whatever you want

    contentFull:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
        title:
          type: string
          example: Why nullable types are better than null
        abstract:
          type: string
          nullable: true
          example: |
            This is an abstract about why nullable types are better than null
            The main reason is that they are better is that you won't get null pointer exceptions
        type:
          $ref: "#/components/schemas/contentType"
        award:
          type: string
          nullable: true
          example: Best Paper
      required: [id, title, abstract, type, award]

    contentType:
      type: string
      example: Event


    developerInformation:
      type: object
      additionalProperties: false
      required: ["name", "student_id"]
      properties:
        name:
          type: string
          example: John Smith
        student_id:
          type: string
          pattern: "w[0-9]{8}"

    preview:
      type: object
      additionalProperties: false
      required: ["title", "preview_video"]
      properties:
        title:
          type: string
          example: How to Never Give Up or Let Yourself Down
        preview_video:
          type: string
          format: uri
          pattern: "https://www.youtube.com/watch\\?v=[a-zA-Z0-9_-]{11}"
          example: https://www.youtube.com/watch?v=dQw4w9WgXcQ

    affiliationInformation:
      type: object
      properties:
        author_id:
          type: number
          description: The unique identifier for the author.
        author_name:
          type: string
          description: The name of the author.
        country:
          type: string
          description: The country where the author is affiliated.
        city:
          type: string
          description: The city where the author is located.
        institution:
          type: string
          description: The institution to which the author is affiliated.
        content:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
                description: The unique identifier for the content.
              title:
                type: string
                description: The title of the content.
      additionalProperties: false
      required:
        - author_id
        - author_name
        - country
        - city
        - institution
        - content


    note:
      type: object
      additionalProperties: false
      required: ["id", "content_id", "text"]
      properties:
        id:
          type: integer
        content_id:
          type: integer
        text:
          type: string
          example: |
            This seems like a really interesting paper, but I can't be bothered to read it.
